/* ========================================
   Week 7 Assignment - CSS Styles
   This file contains all transitions and 
   keyframe animations for the project
   ======================================== */

/* ========== GENERAL STYLES ========== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
}

h1 {
    text-align: center;
    color: #667eea;
    margin-bottom: 10px;
    font-size: 2.5em;
}

.subtitle {
    text-align: center;
    color: #666;
    margin-bottom: 40px;
    font-size: 1.1em;
}

/* ========== SECTION STYLES ========== */
.section {
    margin-bottom: 40px;
    padding: 30px;
    background: #f8f9fa;
    border-radius: 15px;
    border-left: 5px solid #667eea;
}

.section h2 {
    color: #667eea;
    margin-bottom: 15px;
    font-size: 1.8em;
}

.section-description {
    background: #e3f2fd;
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 20px;
    color: #1565c0;
    font-weight: 500;
}

/* ========================================
   CSS TRANSITIONS
   Transitions create smooth changes between
   CSS property values over a specified duration
   ======================================== */

/* Button with transition effects */
.btn {
    padding: 12px 30px;
    margin: 10px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    cursor: pointer;
    background: #667eea;
    color: white;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    
    /* TRANSITION: Makes all property changes smooth over 0.3 seconds */
    /* This affects background-color, transform, box-shadow, etc. */
    transition: all 0.3s ease;
}

/* Hover state - these changes happen smoothly because of transition */
.btn:hover {
    background: #764ba2;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

/* Active state - button pressed down */
.btn:active {
    transform: translateY(0);
}

/* ========================================
   KEYFRAME ANIMATION #1: SLIDE IN
   Keyframes define the stages of an animation
   from start (0%) to end (100%)
   ======================================== */

@keyframes slideIn {
    /* Starting state - off screen and invisible */
    0% {
        transform: translateX(-100px);
        opacity: 0;
    }
    /* Ending state - in position and visible */
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

.animated-box {
    width: 200px;
    height: 100px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 10px;
    margin: 20px 0;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    opacity: 0;
}

/* When 'active' class is added, the animation runs */
.animated-box.active {
    /* Apply slideIn animation: name, duration, timing-function, fill-mode */
    animation: slideIn 0.8s ease forwards;
}

/* ========================================
   KEYFRAME ANIMATION #2: ROTATE
   This creates a continuous spinning effect
   ======================================== */

@keyframes rotate {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

.circle {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: linear-gradient(135deg, #f093fb, #f5576c);
    margin: 20px auto;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
}

/* Spinning state - uses 'infinite' to loop forever */
.circle.spinning {
    /* Animation: name, duration, timing-function, iteration-count */
    animation: rotate 2s linear infinite;
}

/* ========================================
   KEYFRAME ANIMATION #3: BOUNCE
   This creates a bouncing up and down effect
   with multiple keyframe stages
   ======================================== */

@keyframes bounce {
    /* Start and end at original position */
    0%, 100% {
        transform: translateY(0);
    }
    /* Middle of animation - jump up 30px */
    50% {
        transform: translateY(-30px);
    }
}

.bounce-box {
    width: 80px;
    height: 80px;
    background: #4caf50;
    border-radius: 10px;
    margin: 20px auto;
}

/* Bouncing state - runs 3 times then stops */
.bounce-box.bouncing {
    /* Animation runs 3 times (not infinite) */
    animation: bounce 0.6s ease-in-out 3;
}

/* ========================================
   KEYFRAME ANIMATION #4: FADE IN
   Creates a fade and scale effect for results
   ======================================== */

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* ========== OUTPUT DISPLAY ========== */
.output {
    background: #fff3cd;
    padding: 15px;
    border-radius: 10px;
    margin-top: 15px;
    border-left: 4px solid #ffc107;
    font-family: 'Courier New', monospace;
    min-height: 50px;
}

.output strong {
    color: #d32f2f;
}

/* Result card with fade-in animation */
.result-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    margin-top: 15px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: none;
}

/* When 'show' class is added, card fades in */
.result-card.show {
    display: block;
    animation: fadeIn 0.5s ease;
}

/* ========== INPUT STYLES ========== */
input[type="number"],
input[type="text"] {
    padding: 10px;
    border: 2px solid #667eea;
    border-radius: 8px;
    margin: 5px;
    font-size: 16px;
    width: 150px;
    
    /* TRANSITION: Smooth border color change on focus */
    transition: border-color 0.3s ease;
}

/* Input focus state with smooth transition */
input[type="number"]:focus,
input[type="text"]:focus {
    outline: none;
    border-color: #764ba2;
}